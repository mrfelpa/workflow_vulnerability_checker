import argparse
import requests
import re
from rich.console import Console
from rich.table import Table
from rich.prompt import Prompt

def check_vulnerability(repo_url):
    match = re.match(r'https://github.com/([^/]+)/([^/]+)', repo_url)
    if not match:
        return "Invalid URL. Make sure to provide the complete repository URL."
    
    username = match.group(1)
    repo_name = match.group(2)
        
    response = requests.get(f'https://api.github.com/repos/{username}/{repo_name}/actions/workflows')
    if response.status_code != 200:
        return "Error getting the repository workflows."
    
    workflows = response.json()
    
    vulnerable_workflows = []
    for workflow in workflows['workflows']:
        workflow_response = requests.get(workflow['url'])
        if workflow_response.status_code != 200:
            continue
        
        workflow_content = workflow_response.json()
        
        if 'jobs' not in workflow_content:
            continue  
        
        for job in workflow_content['jobs'].values():
            for step in job['steps']:
                if 'run' in step:
                    if re.search(r'\${{.*}}', step['run']):
                        vulnerable_workflows.append(workflow['name'])
                        break
                if 'uses' in step:
                    if re.search(r'\${{.*}}', step['uses']):
                        vulnerable_workflows.append(workflow['name'])
                        break
    
    if not vulnerable_workflows:
        return "No vulnerable workflows found."
    else:
        return f"The following workflows may be vulnerable:\n{', '.join(vulnerable_workflows)}"

def print_results(results):
    console = Console()
    table = Table(title="Vulnerability Check Results")

    table.add_column("Repository", justify="left", style="cyan")
    table.add_column("Result", justify="left", style="magenta")

    for repo_url, repo_result in results.items():
        table.add_row(repo_url, repo_result)

    console.print(table)

def main():
    console = Console()
    console.print("[bold green]GitHub Actions Workflow Vulnerability Checker[/bold green]")
    
    parser = argparse.ArgumentParser(description='Check for vulnerabilities in GitHub Actions workflows')
    parser.add_argument('repo_urls', type=str, nargs='*', help='GitHub repository URLs')
    args = parser.parse_args()
    
    if not args.repo_urls:
        console.print("Please enter the GitHub repository URL:")
        repo_url = Prompt.ask("Repository URL")
        args.repo_urls = [repo_url]
    
    results = {}
    for repo_url in args.repo_urls:
        result = check_vulnerability(repo_url)
        results[repo_url] = result
    
    print_results(results)

if __name__ == '__main__':
    main()
