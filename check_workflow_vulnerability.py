import argparse
import requests
import re
from rich.console import Console
from rich.table import Table
from rich.prompt import Prompt
from rich.progress import Progress
from typing import Dict, List

console = Console()

def check_vulnerability(repo_url: str) -> str:
    match = re.match(r'https://github.com/([^/]+)/([^/]+)', repo_url)
    if not match:
        return "Invalid URL. Make sure to provide the complete repository URL."
    
    username, repo_name = match.groups()
    
    try:
        response = requests.get(f'https://api.github.com/repos/{username}/{repo_name}/actions/workflows')
        response.raise_for_status()  
    except requests.RequestException as e:
        return f"Error getting the repository workflows: {e}"
    
    workflows = response.json()
    vulnerable_workflows = []

    for workflow in workflows.get('workflows', []):
        if is_workflow_vulnerable(workflow['url']):
            vulnerable_workflows.append(workflow['name'])

    return format_vulnerability_results(vulnerable_workflows)

def is_workflow_vulnerable(workflow_url: str) -> bool:
    try:
        workflow_response = requests.get(workflow_url)
        workflow_response.raise_for_status()
        workflow_content = workflow_response.json()
    except requests.RequestException:
        return False

    for job in workflow_content.get('jobs', {}).values():
        for step in job.get('steps', []):
            if is_step_vulnerable(step):
                return True
    return False

def is_step_vulnerable(step: Dict) -> bool:
    return any(
        'run' in step and re.search(r'\${{.*}}', step['run']) or
        'uses' in step and re.search(r'\${{.*}}', step['uses'])
    )

def format_vulnerability_results(vulnerable_workflows: List[str]) -> str:
    if not vulnerable_workflows:
        return "No vulnerable workflows found."
    return f"The following workflows may be vulnerable:\n{', '.join(vulnerable_workflows)}"

def print_results(results: Dict[str, str]) -> None:
    
    table = Table(title="Vulnerability Check Results")

    table.add_column("Repository", justify="left", style="cyan")
    table.add_column("Result", justify="left", style="magenta")

    for repo_url, repo_result in results.items():
        if "No vulnerable workflows found" in repo_result:
            table.add_row(repo_url, "[bold green]Safe[/bold green]")
        else:
            table.add_row(repo_url, f"[bold red]{repo_result}[/bold red]")

    console.print(table)

def main() -> None:

    console.print("[bold green]GitHub Actions Workflow Vulnerability Checker[/bold green]")
    
    while True:
        repo_url = Prompt.ask("Please enter the GitHub repository URL (or type 'exit' to quit)")
        
        if repo_url.lower() == 'exit':
            console.print("[bold red]Exiting the program...[/bold red]")
            break
        
        if not re.match(r'https://github.com/[^/]+/[^/]+', repo_url):
            console.print("[bold red]Invalid URL format. Please provide a valid GitHub repository URL.[/bold red]")
            continue

        console.print(f"[bold blue]Checking vulnerability for:[/bold blue] {repo_url}")
        
        with Progress() as progress:
            task = progress.add_task("[cyan]Checking...", total=None)
            result = check_vulnerability(repo_url)
            progress.update(task, completed=True)

        console.print(result)

if __name__ == '__main__':
    main()
