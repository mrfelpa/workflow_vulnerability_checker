import requests
import re
from rich.console import Console
from rich.table import Table
from rich.prompt import Prompt
from rich.progress import Progress
from typing import Dict, List, Optional

console = Console()

class GitHubVulnerabilityChecker:

    def __init__(self, repo_url: str):
        self.repo_url = repo_url
        self.username, self.repo_name = self.parse_repo_url(repo_url)

    @staticmethod
    def parse_repo_url(repo_url: str) -> Optional[tuple]:
        match = re.match(r'https://github.com/([^/]+)/([^/]+)', repo_url)
        if match:
            return match.groups()
        return None, None

    def check_vulnerability(self) -> str:
        if not self.username or not self.repo_name:
            return "Invalid URL. Make sure to provide the complete repository URL."

        workflows = self.fetch_workflows()
        if isinstance(workflows, str):  # Error message returned
            return workflows
        
        vulnerable_workflows = [workflow['name'] for workflow in workflows if self.is_workflow_vulnerable(workflow['url'])]
        return self.format_vulnerability_results(vulnerable_workflows)

    def fetch_workflows(self) -> Optional[List[Dict]]:
        try:
            response = requests.get(f'https://api.github.com/repos/{self.username}/{self.repo_name}/actions/workflows')
            response.raise_for_status()
            return response.json().get('workflows', [])
        except requests.RequestException as e:
            return f"Error getting the repository workflows: {e}"

    def is_workflow_vulnerable(self, workflow_url: str) -> bool:
        try:
            workflow_response = requests.get(workflow_url)
            workflow_response.raise_for_status()
            workflow_content = workflow_response.json()
        except requests.RequestException:
            return False

        return any(self.is_step_vulnerable(step) for job in workflow_content.get('jobs', {}).values() for step in job.get('steps', []))

    @staticmethod
    def is_step_vulnerable(step: Dict) -> bool:
        return any(
            ('run' in step and re.search(r'\${{.*}}', step['run'])) or
            ('uses' in step and re.search(r'\${{.*}}', step['uses']))
        )

    @staticmethod
    def format_vulnerability_results(vulnerable_workflows: List[str]) -> str:
        if not vulnerable_workflows:
            return "No vulnerable workflows found."
        return f"The following workflows may be vulnerable:\n{', '.join(vulnerable_workflows)}"

def print_results(repo_url: str, result: str) -> None:
  
    table = Table(title="Vulnerability Check Results")
    table.add_column("Repository", justify="left", style="cyan")
    table.add_column("Result", justify="left", style="magenta")

    status = "[bold green]Safe[/bold green]" if "No vulnerable workflows found" in result else f"[bold red]{result}[/bold red]"
    table.add_row(repo_url, status)

    console.print(table)

def main() -> None:
    console.print("[bold green]GitHub Actions Workflow Vulnerability Checker[/bold green]")
    
    while True:
        repo_url = Prompt.ask("Please enter the GitHub repository URL (or type 'exit' to quit)")
        
        if repo_url.lower() == 'exit':
            console.print("[bold red]Exiting the program...[/bold red]")
            break
        
        if not re.match(r'https://github.com/[^/]+/[^/]+', repo_url):
            console.print("[bold red]Invalid URL format. Please provide a valid GitHub repository URL.[/bold red]")
            continue

        console.print(f"[bold blue]Checking vulnerability for:[/bold blue] {repo_url}")
        
        checker = GitHubVulnerabilityChecker(repo_url)

        with Progress() as progress:
            task = progress.add_task("[cyan]Checking...", total=None)
            result = checker.check_vulnerability()
            progress.update(task, completed=True)

        print_results(repo_url, result)

if __name__ == '__main__':
    main()
